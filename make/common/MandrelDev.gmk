UNAME_S := $(shell uname -s)
ifeq ($(UNAME_S),Linux)
  java_home_suffix =
endif
ifeq ($(UNAME_S),Darwin)
  java_home_suffix = /Contents/Home
endif

MANDREL_HOME = $(opt)/$(ID)
JAVA_HOME = $(MANDREL_HOME)$(java_home_suffix)

ifdef BOOT_GDK_HOME
  boot_gdk_home = $(BOOT_GDK_HOME)
else
  boot_gdk_home = $(opt)/boot-graal-$(BOOT_GDK_VERSION)-$(BOOT_GDK_BUILD)
endif
boot_gdk_java = $(boot_gdk_home)/bin/java

graalvm_home = $(GDK_HOME)/sdk/latest_graalvm_home
gdk_svm_home = $(GDK_HOME)/substratevm
gdk_compiler_home = $(GDK_HOME)/compiler
libnative-image-agent = $(graalvm_home)/lib/libnative-image-agent.so
mx += JAVA_HOME=$(boot_gdk_home)
mx += $(mx_bin)
mx_bin = $(mx_home)/mx
mx_home = $(opt)/mx
packaging_args += -ea
packaging_args += $(packaging_build)
packaging_args += --mx-home
packaging_args += $(mx_home)
packaging_args += --mandrel-repo
packaging_args += $(GDK_HOME)
packaging_args += --mandrel-home
packaging_args += $(MANDREL_HOME)
packaging_args += --skip-clean
packaging_home = $(HOME)/1/mandrel-packaging
packaging_build = $(packaging_home)/build.java

ifdef VERBOSE
  packaging_args += --verbose
endif

ifdef DEBUG_IMAGES
  mx += --debug-images
endif

native_image = $(JAVA_HOME)/bin/native-image

build-graal: $(native_image)
.PHONY: build-graal

$(native_image): $(shell find $(gdk_compiler_home)/src -type f -name '*.java')
$(native_image): $(shell find $(gdk_svm_home)/src -type f -name '*.java')
$(native_image): $(shell find $(gdk_svm_home)/src -type f -name '*.properties')
$(native_image): $(mx_bin) $(boot_gdk_java) $(packaging_build)
> JAVA_HOME=$(boot_gdk_home) $(boot_gdk_java) $(packaging_args) --skip-native-agents

$(packaging_build):
> cd $(HOME)/1
> git clone https://github.com/graalvm/mandrel-packaging

#> cd $(gdk_svm_home)
#> $(mx) $(mx_build_args)
#> $(mx) build
#> $(mx) --jmods-dir NO_JMODS build
#> $(mx) --jmods-dir NO_JMODS --components="Native Image" build

$(libnative-image-agent): $(shell find $(gdk_svm_home)/src/com.oracle.svm.agent/src -type f -name '*.java')
$(libnative-image-agent): $(shell find $(gdk_svm_home)/src/com.oracle.svm.agent/src -type f -name '*.properties')
$(libnative-image-agent): $(native_image)
> cd $(gdk_svm_home)
> $< -g --macro:native-image-agent-library

$(mx_bin):
> git clone --depth 1 https://github.com/graalvm/mx $(mx_home)

mx-update:
> $(mx) update
.PHONY: mx-update

mx-fetch-jdk:
> JAVA_HOME=$(opt)/java-21 $(mx_bin) fetch-jdk
.PHONY: mx-fetch-jdk

clean-graal: $(java)
> cd $(gdk_svm_home)
> $(mx) clean
.PHONY: clean-graal

idea: $(java)
> cd $(gdk_svm_home)
> $(mx) intellijinit
.PHONY: idea

gate: $(boot_gdk_java)
> $(call gate,JAVA_HOME=$(boot_gdk_home) $(mx_home)/mx)
.PHONY: gate

define gate
cd $(gdk_home)
$(1) --primary-suite-path substratevm clean --all
$(1) --primary-suite-path substratevm build -p --warning-as-error --jdt=builtin
$(1) --primary-suite-path substratevm clean --all
$(1) --primary-suite-path substratevm build -p --warning-as-error --force-javac
$(1) --primary-suite-path substratevm spotbugs --strict-mode
$(1) --primary-suite-path substratevm checkstyle --primary
endef

eclipse:
> cd $(gdk_home)
> $(mx) --primary-suite-path substratevm eclipseformat -e /Applications/Eclipse.app/Contents/MacOS/eclipse --primary
.PHONY: eclipse

$(boot_gdk_java):
> mkdir -p $(opt)
> $(TOPDIR)/make/common/download-jdk.sh $(BOOT_GDK_VERSION) $(BOOT_GDK_BUILD) $(opt)
> touch $@

download-boot-graal: $(boot_gdk_java)
.PHONY: download-boot-graal
