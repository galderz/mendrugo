MAVEN_ARGS ?=
VERBOSE_GC ?=
QUICKSTART_BRANCH ?= main

application_properties = $(APP)/src/main/resources/application.properties
graalvm_version_cmd = strings $(runner) | grep GraalVM
jar = $(target)/quarkus-app/quarkus-run.jar
jcmd = $(JAVA_HOME)/bin/jcmd
native_build_args += -Dnative
pom = $(APP)/pom.xml
runner = $(target)/$(QUICKSTART_NAME)-1.0.0-SNAPSHOT-runner

ifdef DEBUG
  mvn_package += dependency:sources
  native_build_args += -Dquarkus.native.debug.enabled

  graalvm_build_args := -H:-OmitInlinedMethodDebugLineInfo,-O0,-H:-DeleteLocalSymbols
  release_file := $(JAVA_HOME)/release
  ifneq ($(wildcard $(release_file)),)
    GRAALVM_GTEQ_22_2_0 := $(shell expr `sed -nE 's/GRAALVM_VERSION="([^"]+)"/\1/p' $(release_file) | sed -e 's/\.\([0-9][0-9]\)/\1/g' -e 's/\.\([0-9]\)/0\1/g' -e 's/^[0-9]\{3,4\}$$/&00/' | cut -c 1-6` \>= 220200)
    ifeq ("$(GRAALVM_GTEQ_22_2_0)","1")
      graalvm_build_args := $(subst  ,,$(graalvm_build_args)),-H:+SourceLevelDebug
    endif
  endif

  native_build_args += -Dquarkus.native.additional-build-args=$(graalvm_build_args)
endif

ifdef MAVEN_ARGS
  mvn_package += $(foreach arg,$(MAVEN_ARGS),$(arg))
endif

ifdef NATIVE_BUILD_ARGS
  native_build_args += -Dquarkus.native.additional-build-args=$(NATIVE_BUILD_ARGS)
endif

ifdef RUN_ARGS
  run_args += $(foreach arg,$(RUN_ARGS),$(arg))
endif

ifdef XMX
  run_args += -Xmx$(XMX)
else
  run_args += -Xmx64m
endif

run_jvm_opts += $(run_args)

ifeq ($(VERBOSE_GC),1)
  run_args += -XX:+PrintGC
  run_args += -XX:+PrintGCTimeStamps
else ifeq ($(VERBOSE_GC),2)
  run_args += -XX:+PrintGC
  run_args += -XX:+PrintGCTimeStamps
  run_args += -XX:+VerboseGC
else ifeq ($(VERBOSE_GC),3)
  run_args += -XX:+PrintGC
  run_args += -XX:+VerboseGC
  run_args += -XX:+PrintHeapShape
else ifeq ($(VERBOSE_GC),4)
  run_args += -XX:+PrintGC
  run_args += -XX:+VerboseGC
  run_args += -XX:+PrintHeapShape
  run_args += -XX:+TraceHeapChunks
endif

ifdef JVM_DEBUG
  run_jvm_opts += -agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=*:5005
endif

ifdef TMPDIR
  tmp_dir = $(TMPDIR)
else
  tmp_dir = /tmp
endif

ifdef JFR
  mvn_package += -Dquarkus.native.monitoring=jfr
endif

run: $(runner) print-graalvm-version
> $< $(run_args)
.PHONY: run

print-graalvm-version: $(runner)
> strings $(runner) | grep GraalVM
.PHONY: print-graalvm-version

run-jvm: $(jar)
> $(java) $(run_jvm_opts) -jar $<
.PHONY: run-jvm

run-dev:
> cd $(APP)
> $(mvn_cmd) quarkus:dev
.PHONY: run-dev

build: $(runner)
.PHONY: build

$(runner): $(pom) $(native_image)
> cd $(APP)
> $(mvn_package) $(native_build_args)

$(jar): $(pom) $(java) $(mvnw)
> cd $(APP)
> $(mvn_package)

$(pom):
> pushd $(tmp_dir)
> rm -drf quarkus-quickstarts || true
> git clone https://github.com/quarkusio/quarkus-quickstarts
> cd quarkus-quickstarts
> git checkout $(QUICKSTART_BRANCH)
> popd
> cp -r $(tmp_dir)/quarkus-quickstarts/$(QUICKSTART_NAME) .
> mv $(QUICKSTART_NAME) $(APP)

clean-app:
> rm -drf $(APP)
.PHONY: clean-app

rss:
> ps -p $$(pidof $(APP)-1.0.0-SNAPSHOT-runner) -o rss=
.PHONY: rss

add-app-property:
> echo $(APP_PROPERTY) > $(application_properties)
.PHONY: add-application-property

### crac

run-crac-checkpoint: $(jar)
> $(java) $(run_jvm_opts) -XX:CRaCCheckpointTo=$(target)/cr -jar $<
#> $(java) $(run_jvm_opts) -XX:CRaCCheckpointTo=cr -XX:+UnlockDiagnosticVMOptions -XX:+CRTraceStartupTime -Djdk.crac.trace-startup-time=true -jar $<
.PHONY: run-crac-checkpoint

jcmd-crac-checkpoint: $(jar)
> $(jcmd) $< JDK.checkpoint
.PHONY: jcmd-crac-checkpoint

run-crac-restore: $(jar)
> sudo $(java) -XX:CRaCRestoreFrom=$(target)/cr
.PHONY: run-crac-restore

### perf

event := syscalls:sys_enter_mmap
fg_home := /opt/FlameGraph
flamegraph = $(fg_home)/flamegraph.pl
perf_data = $(target)/perf.data
stacks = $(target)/out.stacks
stackcollapse_perf = $(fg_home)/stackcollapse-perf.pl
strace = $(target)/strace.log
svg = $(target)/out.svg
perf_trace = $(target)/perf-trace.log

record: $(runner)
> sudo perf record -e $(event) --call-graph dwarf -o $(perf_data) -- taskset -c 1 $< $(run_args)
.PHONY: record

trace: $(runner)
> sudo perf trace -e $(event) --call-graph dwarf -o $(perf_trace) -- taskset -c 1 $< $(run_args)
.PHONY: trace

flame:
> sudo chown $(USER) $(perf_data)
> perf script -i $(perf_data) > $(stacks)
> $(stackcollapse_perf) < $(stacks) | $(flamegraph) \
>   --color=mem \
>   --title="mmap Flame Graph" \
>   --countname="calls" > $(svg)
.PHONY: flame

### strace

# Can be filtered by passing the syscall to trace, e.g. -emmap
strace: $(runner)
> taskset -c 1 strace -o $(strace) -k $< $(run_args)
.PHONY: strace
