RULE discover class
CLASS com.oracle.svm.core.hub.ClassForNameSupport
METHOD registerClass
HELPER org.acme.byteman.ClassDiscoveryHelper
AT ENTRY
BIND
  numIterations = readCounter("numIterations");
  prefix = "(" + Thread.currentThread().getName() + ") [run-analysis-" + numIterations + "]";
IF TRUE
DO
  # traceln(prefix + " discover class " + $1.toString());
  trackClassDiscovery(numIterations, $1);
ENDRULE

RULE track register type for class
CLASS com.oracle.svm.reflect.hosted.ReflectionDataBuilder
METHOD registerTypesForClass
HELPER org.acme.byteman.ClassDiscoveryHelper
AT ENTRY
IF TRUE
DO
  trackRegisterTypeForClass($3);
ENDRULE

RULE create image heap object
CLASS com.oracle.graal.pointsto.heap.ImageHeapScanner
METHOD createImageHeapObject
HELPER org.acme.byteman.ClassDiscoveryHelper
AT ENTRY
BIND
  numIterations = readCounter("numIterations");
  prefix = "(" + Thread.currentThread().getName() + ") [run-analysis-" + numIterations + "]";
  backtrace = new StringBuilder();
IF TRUE
DO
  # traceln(prefix + " create image object " + $1.toValueString() + " because " + $2.toString());
  # com.oracle.graal.pointsto.ObjectScanner.buildObjectBacktrace($this.universe.getBigbang(), $2, backtrace);
  # traceln(prefix + " create image object " + $1.toValueString() + " because " + backtrace.toString());
  trackImageHeapObject($1.toValueString(), $2);
ENDRULE

RULE create embedded root scan reason
CLASS com.oracle.graal.pointsto.ObjectScanner$EmbeddedRootScan
METHOD <init>(jdk.vm.ci.code.BytecodePosition, jdk.vm.ci.meta.JavaConstant, com.oracle.graal.pointsto.ObjectScanner$ScanReason)
HELPER org.acme.byteman.ClassDiscoveryHelper
AT EXIT
BIND
  numIterations = readCounter("numIterations");
  prefix = "(" + Thread.currentThread().getName() + ") [run-analysis-" + numIterations + "]";
  scanReason = $0;
  position = $1;
  positionCaller = $1.getCaller();
IF TRUE
DO
  # traceln(prefix + " create image object " + $1.toValueString() + " because " + $2.toString());
  # com.oracle.graal.pointsto.ObjectScanner.buildObjectBacktrace($this.universe.getBigbang(), $2, backtrace);
  # traceln(prefix + " create image object " + $1.toValueString() + " because " + backtrace.toString());
  trackEmbeddedRootScanPosition(scanReason, position, positionCaller, positionCaller != null ? positionCaller.getCaller() : null);
ENDRULE

RULE print summary class discovery
CLASS com.oracle.graal.pointsto.PointsToAnalysis
METHOD runAnalysis
HELPER org.acme.byteman.ClassDiscoveryHelper
AT EXIT
IF TRUE
DO
  printSummary();
ENDRULE
