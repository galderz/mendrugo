RULE finish at entry
CLASS com.oracle.graal.pointsto.PointsToAnalysis
METHOD finish
AT ENTRY
BIND
  numIterations = incrementCounter("numIterations");
  prefix = "(" + Thread.currentThread().getName() + ") [run-analysis-" + numIterations + "]";
IF TRUE
DO
  traceln(prefix + " ==> start iteration " + numIterations);
ENDRULE

#RULE report progress
#CLASS com.oracle.svm.hosted.ProgressReporter$StagePrinter
#METHOD reportProgress
#AT ENTRY
#IF TRUE
#DO
#  traceln("(" + Thread.currentThread().getName() + ") [printer] report progress with '*'")
#  # traceStack("(" + Thread.currentThread().getName() + ") [printer] report progress with '*'\n", 10)
#ENDRULE
#
#RULE num iterations at exit
#CLASS com.oracle.graal.pointsto.PointsToAnalysis
#METHOD runAnalysis
#AT EXIT
#IF TRUE
#DO
#  traceln("(" + Thread.currentThread().getName() + ") [run-analysis] completed with number of iterations: " + $numIterations)
#ENDRULE

#RULE finish at return
#CLASS com.oracle.graal.pointsto.PointsToAnalysis
#METHOD finish
#AT RETURN
#IF TRUE
#DO
#  traceln("(" + Thread.currentThread().getName() + ") [run-analysis] did type flow update? " + $!)
#ENDRULE

RULE image heap map needs update and requires analysis iteration
CLASS com.oracle.svm.hosted.heap.ImageHeapMapFeature
METHOD needsUpdate
AT RETURN
BIND
  requireAnalysisIteration = linked("requireAnalysisIteration");
  numIterations = readCounter("numIterations");
  prefix = "(" + Thread.currentThread().getName() + ") [run-analysis-" + numIterations + "]";
IF
  $!
  AND
  (
    java.util.Objects.isNull(requireAnalysisIteration)
    OR
    java.util.Objects.equals(false, requireAnalysisIteration)
  )
DO
  link("requireAnalysisIteration", true);
  traceln(prefix + " analysis iteration required; reason: hosted map changed");
ENDRULE

RULE image heap map needs update
CLASS com.oracle.svm.hosted.heap.ImageHeapMapFeature
METHOD needsUpdate
AT RETURN
BIND
  numIterations = readCounter("numIterations");
  prefix = "(" + Thread.currentThread().getName() + ") [run-analysis-" + numIterations + "]";
IF
  $!
DO
  traceln(prefix + " hosted map changed; hostedMap=" + $hostedMap.map.size() + ", runtimeMap.size=" + $hostedMap.runtimeMap.size() + "; types " + $hostedMap.map.keySet().iterator().next().getClass() + " => " + $hostedMap.map.values().iterator().next().getClass());
ENDRULE

RULE image heap map needs update print class maps
CLASS com.oracle.svm.hosted.heap.ImageHeapMapFeature
METHOD needsUpdate
AT RETURN
BIND
  numIterations = readCounter("numIterations");
  prefix = "(" + Thread.currentThread().getName() + ") [run-analysis-" + numIterations + "]";
  # hostedClassNames = new java.util.HashSet($hostedMap.map.keySet());
  hostedClassNames = new java.util.ArrayList($hostedMap.map.keySet());
  runtimeClassNames : java.util.List = java.util.stream.StreamSupport.stream($hostedMap.runtimeMap.getKeys().spliterator(), false).collect(java.util.stream.Collectors.toList());
IF
  $!
  AND
  $hostedMap.map.values().iterator().next().getClass() == java.lang.Class.class
DO
  hostedClassNames.removeAll(runtimeClassNames);
  hostedClassNames.sort(String.CASE_INSENSITIVE_ORDER);
  traceln(prefix + " hosted map changed; added host class names: \n" + String.join("\n", hostedClassNames));
ENDRULE

RULE record class registration
CLASS com.oracle.svm.core.hub.ClassForNameSupport
METHOD registerClass
HELPER org.acme.byteman.ClassAnalysisHelper
AT RETURN
IF TRUE
DO
  trackClass($clazz);
ENDRULE

RULE require analysis iteration because of analysis state modification
CLASS com.oracle.graal.pointsto.heap.HeapSnapshotVerifier
METHOD requireAnalysisIteration
AT RETURN
BIND
  numIterations = readCounter("numIterations");
  prefix = "(" + Thread.currentThread().getName() + ") [run-analysis-" + numIterations + "]";
IF
  $!
  AND
  $this.analysisModified
DO
  traceln(prefix + " analysis iteration required; reason: heap verification modified analysis state");
ENDRULE

RULE require analysis iteration because of new types became reachable
CLASS com.oracle.graal.pointsto.heap.HeapSnapshotVerifier
METHOD requireAnalysisIteration
AT RETURN
BIND
  numIterations = readCounter("numIterations");
  prefix = "(" + Thread.currentThread().getName() + ") [run-analysis-" + numIterations + "]";
IF
  $!
  AND
  $verificationReachableTypes > 0
DO
  traceln(prefix + " analysis iteration required; reason: " + $verificationReachableTypes + " new types became reachable");
ENDRULE

RULE require analysis iteration called
CLASS com.oracle.svm.hosted.FeatureImpl$DuringAnalysisAccessImpl
METHOD getAndResetRequireAnalysisIteration
AT EXIT
IF
  TRUE
DO
  link("requireAnalysisIteration", false);
ENDRULE
